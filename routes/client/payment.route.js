const express = require("express");
const router = express.Router();
const Pay = require("../../models/pay.model");
const User = require("../../models/user.model");
const Course = require("../../models/course.model");

router.post('/zalopay-callback', async (req, res) => {
   console.log("üì• Nh·∫≠n callback t·ª´ ZaloPay:", req.body);
 
   const { app_trans_id, amount } = req.body;
   if (!app_trans_id) return res.status(400).send('Thi·∫øu app_trans_id');
 
   try {
     const pay = await Pay.findOne({ orderId: app_trans_id });
     if (!pay) return res.status(400).send('Kh√¥ng t√¨m th·∫•y ƒë∆°n h√†ng');
 
     if (pay.PayStatus === 1) return res.status(200).send('ƒê∆°n h√†ng ƒë√£ x·ª≠ l√Ω');
 
     const { UserId, CourseId } = pay;
     const course = await Course.findById(CourseId);
     const user = await User.findById(UserId);
 
     if (!course || !user) return res.status(404).send("Thi·∫øu th√¥ng tin");
 
     // C·∫≠p nh·∫≠t
     await User.updateOne({ _id: UserId }, {
       $push: {
         UserCourse: {
           CourseId,
           CourseStatus: 0,
           CourseProcess: [],
         }
       },
       UserMoney: (user.UserMoney || 0) + amount,
     });
 
     const payTeacher = Math.round(amount * course.CourseSalary / 100);
     const payProfit = amount - payTeacher;
 
     await Pay.updateOne({ orderId: app_trans_id }, {
       PayStatus: 1,
       PayTeacher: payTeacher,
       PayProfit: payProfit,
     });
 
     await Admin.updateOne({ _id: course.CourseIntructor }, {
       AdminSalary: payTeacher,
     });
 
     await Course.updateOne({ _id: CourseId }, {
       $inc: { CourseBought: 1 },
       CourseProfit: payProfit,
     });
 
     return res.status(200).send("OK");
   } catch (error) {
     console.error("‚ùå Callback ZaloPay l·ªói:", error);
     return res.status(500).send("L·ªói server");
   }
 }); 

router.post('/confirm', async (req, res) => {
   console.log("X√°c nh·∫≠n thanh to√°n v·ªõi:", req.body);
   const {
      orderId,
      amount
   } = req.body;

   try {
      const pay = await Pay.findOne({
         orderId
      });
      if (!pay) {
         return res.status(400).json({
            message: "ƒê∆°n h√†ng kh√¥ng t·ªìn t·∫°i!"
         });
      }

      if (pay.PayStatus === 1) {
         return res.status(400).json({
            message: "ƒê∆°n h√†ng ƒë√£ ƒë∆∞·ª£c x·ª≠ l√Ω tr∆∞·ªõc ƒë√≥."
         });
      }

      const {
         UserId,
         CourseId
      } = pay;
      const course = await Course.findById(CourseId);
      const user = await User.findById(UserId);

      if (!course || !user) {
         return res.status(404).json({
            message: "Kh√¥ng t√¨m th·∫•y th√¥ng tin ng∆∞·ªùi d√πng ho·∫∑c kh√≥a h·ªçc."
         });
      }

      // C·∫≠p nh·∫≠t UserCourse
      await User.updateOne({
         _id: UserId
      }, {
         $push: {
            UserCourse: {
               CourseId,
               CourseStatus: 0,
               CourseProcess: []
            }
         }
      });

      // T√≠nh to√°n l∆∞∆°ng gi√°o vi√™n v√† l·ª£i nhu·∫≠n
      const payTeacher = Math.round(amount * course.CourseSalary / 100);
      const payProfit = amount - payTeacher;

      // C·∫≠p nh·∫≠t Pay
      await Pay.updateOne({
         orderId
      }, {
         PayStatus: 1,
         PayTeacher: payTeacher,
         PayProfit: payProfit,
         $push: {
            editedBy: {
               UserId: UserId,
               editedAt: new Date()
            }
         }
      });

      // L·∫•y l·∫°i th√¥ng tin Pay sau khi c·∫≠p nh·∫≠t
      const updatedPay = await Pay.findOne({
         orderId
      }).lean();

      res.json({
         message: "X√°c nh·∫≠n thanh to√°n th√†nh c√¥ng!",
         data: updatedPay
      });
   } catch (err) {
      console.error("L·ªói server:", err);
      res.status(500).json({
         message: "L·ªói server khi x√°c nh·∫≠n thanh to√°n."
      });
   }
});

module.exports = router;
